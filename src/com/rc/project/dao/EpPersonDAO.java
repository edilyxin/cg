package com.rc.project.dao;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.rc.project.form.EpPersonForm;
import com.rc.project.vo.EpPerson;
import com.rc.project.vo.EpSetting;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.List;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class EpPersonDAO extends SqlMapClientDaoSupport {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CG.EP_PERSON
     *
     * @ibatorgenerated Mon Mar 17 15:29:33 CST 2014
     */
    public EpPersonDAO() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CG.EP_PERSON
     *
     * @ibatorgenerated Mon Mar 17 15:29:33 CST 2014
     */
    public boolean insert(EpPersonForm record) {
    	Object obj = getSqlMapClientTemplate().queryForObject(
				"EP_PERSON_maxid");    	
    	int maxId = obj == null ? 0:(Integer)obj;
    	
    	record.setPER_NID(maxId);        
		return getSqlMapClientTemplate().insert("EP_PERSON_insert", record) == null ? false
				: true;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CG.EP_PERSON
     *
     * @ibatorgenerated Mon Mar 17 15:29:33 CST 2014
     */
    public EpPerson selectByPrimaryKey(int PER_NID) {
    	EpPerson record = (EpPerson) getSqlMapClientTemplate()
				.queryForObject("EP_PERSON_selectByPrimaryKey", PER_NID);
		return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table CG.EP_PERSON
     *
     * @ibatorgenerated Mon Mar 17 15:29:33 CST 2014
     */
    public boolean updateByPrimaryKey(EpPersonForm record) {
    	int rows = getSqlMapClientTemplate().update("EP_PERSON_update", record);
        return rows == 0?false:true;
    }
    
    public List findPage(EpPersonForm form){
    	return getSqlMapClientTemplate().queryForList("EP_PERSON_findPage", form);
    }
    
    public int findSize(EpPersonForm form){
    	return (Integer) getSqlMapClientTemplate().queryForObject(
				"EP_PERSON_findSize", form);
    }
    
    public boolean delete(String[] idchecked){
    	boolean bl = false;
		SqlMapClient sqlMapClient = getSqlMapClientTemplate().getSqlMapClient();
		try {
			sqlMapClient.startTransaction();
			sqlMapClient.startBatch();
			if (idchecked != null) {
				for (int i = 0; i < idchecked.length; i++) {
					sqlMapClient.update("EP_PERSON_delete", idchecked[i]);
				}
			}
			sqlMapClient.executeBatch();
			sqlMapClient.commitTransaction();
			bl = true;
		} catch (Exception e) {
			try {
				sqlMapClient.getCurrentConnection().rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		} finally {
			try {
				sqlMapClient.endTransaction();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return bl;
    }
    
    public boolean changeValid(String[] idchecked) {
    	boolean bl = false;
		SqlMapClient sqlMapClient = getSqlMapClientTemplate().getSqlMapClient();
		try {
			sqlMapClient.startTransaction();
			sqlMapClient.startBatch();
			if (idchecked != null) {
				for (int i = 0; i < idchecked.length; i++) {
					sqlMapClient.update("EP_PERSON_changeValid", idchecked[i]);
				}
			}
			sqlMapClient.executeBatch();
			sqlMapClient.commitTransaction();
			bl = true;
		} catch (Exception e) {
			try {
				sqlMapClient.getCurrentConnection().rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		} finally {
			try {
				sqlMapClient.endTransaction();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return bl;
    }

}